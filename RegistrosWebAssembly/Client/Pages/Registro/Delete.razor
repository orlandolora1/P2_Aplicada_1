@page "/RegistroClientes"
@page "/RegistroClientes/{VehiculoId:int}"
@inject HttpClient httpclient

<EditForm model = "Clientes" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class ="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3>Registro de Clientes.</h3>
            </div>
            <div class=card-body>

                <div class= "col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                    <label>ID Cliente:</label>
                    <div class="input-group mb-3">
                        <InputNumber @bind-Value ="cliente.VehiculoId" class="form-control" aria-describedby="BotonBuscar"/>
                        <button @onclick="Buscar" class="btn btn-outline-primary" type="button" id="BotonBuscar"><i class ="oi oi-magnifying-glass"/></button>
                    </div>
                </div>
                
                <div class="mb-3">
                    <label class="form-label" for="Nombres">Nombres:</label>
                    <InputText @bind-Value="cliente.Nombres" class="form-control" />
                    <ValidationMessage For="@(() => cliente.Nombres)" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="Telefono">Telefono:</label>
                    <InputText @bind-Value="cliente.Telefono" class="form-control"/>
                    <ValidationMessage For="@(() => cliente.Telefono)" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="Celular">Celular:</label>
                    <InputText @bind-Value="cliente.Celular" class="form-control"/>
                    <ValidationMessage For="@(() => cliente.Celular)" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="RNC">RNC:</label>
                    <InputText @bind-Value="cliente.RNC" class="form-control"/>
                    <ValidationMessage For="@(() => cliente.RNC)" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="Email">Email:</label>
                    <InputText @bind-Value="cliente.Email" class="form-control"/>
                    <ValidationMessage For="@(() => cliente.Email)" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="Direccion">Direccion:</label>
                    <InputText @bind-Value="cliente.Direccion" class="form-control"/>
                    <ValidationMessage For="@(() => cliente.Direccion)" />
                </div>

            </div>
            <div class="card-footer d-flex justify-content-center">
                <div class="btn-group">
                    <button type="button" class="btn btn-outline-primary" @onclick="Nuevo">Nuevo <i class="oi oi-file"/></button>
                    <button type="submit" class="btn btn-outline-success">Guardar <i class="oi oi-document"/></button>
                    <button type="button" class="btn btn-outline-danger"@onclick="Eliminar">Eliminar <i class="oi oi-trash"/></button>
                </div>
            </div>
        </div>
    </div>

</EditForm>
<label>@mensaje</label>

@code
{
    [Parameter]

    public int ClienteId { get; set; }
    public Vehiculo cliente { get; set; } = new Vehiculo();
    public string mensaje = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if(ClienteId > 0)
        {
            cliente.VehiculoId = ClienteId;
            await Buscar();
        }
    }
    public async Task Buscar()
    {
        var clienteEncontrado = await httpclient.GetFromJsonAsync<Vehiculo>($"api/Vehiculo/{cliente.VehiculoId}");

        if(clienteEncontrado != null)
        {
            this.cliente = clienteEncontrado;
            StateHasChanged();
        }
        else
        {
            mensaje = "Ese cliente no se ha encontrado";
        }
    }

    public async void Guardar()
    {
        using var respuesta = await httpclient.PostAsJsonAsync("api/Vehiculo", cliente);

        if(Validar())
        {
            if(!respuesta.IsSuccessStatusCode)
            {
                mensaje = respuesta.ReasonPhrase ?? "error";
                return;
            }

            var clienteDevuelto = await respuesta.Content.ReadFromJsonAsync<Vehiculo>();
        
            if(clienteDevuelto is not null)
            {
                cliente = clienteDevuelto;
                StateHasChanged();
            }
        }
    }

    public void Nuevo()
    {
        this.cliente = new Vehiculo();
        mensaje = string.Empty;
    }

    public bool Validar()
    {
        if(string.IsNullOrEmpty(cliente.Nombres))
        {
            return false;
        }
        if(string.IsNullOrEmpty(cliente.Telefono))
        {
            return false;
        }
        if(string.IsNullOrEmpty(cliente.Celular))
        {
            return false;
        }
        if(string.IsNullOrEmpty(cliente.RNC))
        {
            return false;
        }
        if(string.IsNullOrEmpty(cliente.Email))
        {
            return false;
        }
        if(string.IsNullOrEmpty(cliente.Direccion))
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    public async Task Eliminar()
    {
        using var respuesta = await httpclient.DeleteAsync($"api/Vehiculo/{cliente.VehiculoId}");

        if(Validar())
        {
           if(!respuesta.IsSuccessStatusCode)
            {
                mensaje = respuesta.ReasonPhrase ?? "error";
                return;
            }
            else
            {
                Nuevo();
            } 
        }
    }
}