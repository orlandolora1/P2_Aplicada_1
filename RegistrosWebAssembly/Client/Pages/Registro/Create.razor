@page "/RegistroAccesorio"
@page "/RegistroAccesorio/{AccesorioId:int}"
@inject HttpClient httpclient 

<EditForm model = "Acccesorio" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class ="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3>Registro de Accesorio.</h3>
            </div>
            <div class=card-body>

                <div class= "col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                    <label>ID Accesorio:</label>
                    <div class="input-group mb-3">
                        <InputNumber @bind-Value ="Accesorio.AccesorioId" class="form-control" aria-describedby="BotonBuscar"/>
                        <button @onclick="Buscar" class="btn btn-outline-primary" type="button" id="BotonBuscar"><i class ="oi oi-magnifying-glass"/></button>
                    </div>
                </div>
                
                <div class="mb-3">
                    <label class="form-label" for="Camara Trasera">Camara Trasera:</label>
                    <InputText @bind-Value="Accesorio.Descripcion" class="form-control" />
                    <ValidationMessage For="@(() => Accesorio.Descripcion)" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="Pantalla Interior">Pantalla Interior:</label>
                    <InputNumber @bind-Value="Accesorio.Costo" class="form-control"/>
                    <ValidationMessage For="@(() => Accesorio.Costo)" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="Interior Piel">Interior Piel:</label>
                    <InputNumber @bind-Value="Accesorio.Costo" class="form-control" />
                    <ValidationMessage For="@(() => Accesorio.Costo)" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="Sun Roof">Sun Roof:</label>
                    <InputNumber @bind-Value="Accesorio.Costo" class="form-control" />
                    <ValidationMessage For="@(() => Accesorio.Costo)" />
                </div>

                 <div class="mb-3">
                    <label class="form-label" for="Aros de Lujo">Aros de Lujo:</label>
                    <InputNumber @bind-Value="Accesorio.Costo" class="form-control" />
                    <ValidationMessage For="@(() => Accesorio.Costo)" />
                </div>


            </div>
            <div class="card-footer d-flex justify-content-center">
                <div class="btn-group">
                    <button type="button" class="btn btn-outline-primary" @onclick="Nuevo">Nuevo <i class="oi oi-file"/></button>
                    <button type="submit" class="btn btn-outline-success">Guardar <i class="oi oi-document"/></button>
                    <button type="button" class="btn btn-outline-danger"@onclick="Eliminar">Eliminar <i class="oi oi-trash"/></button>
                </div>
            </div>
        </div>
    </div>

</EditForm>
<label>@mensaje</label>

@code
{
    [Parameter]

    public int PrioridadId { get; set; }
    public Accesorio prioridades { get; set; } = new Accesorio();
    public string mensaje = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if(PrioridadId > 0)
        {
            prioridades.AccesorioId = PrioridadId;
            await Buscar();
        }
    }
    public async Task Buscar()
    {
        var prioridadEncontrada = await httpclient.GetFromJsonAsync<Accesorio>($"api/Prioridades/{prioridades.AccesorioId}");

        if(prioridadEncontrada != null)
        {
            this.prioridades = prioridadEncontrada;
            StateHasChanged();
        }
        else
        {
            mensaje = "Esa prioridad no se ha encontrado";
        }
    }

    public async void Guardar()
    {
        using var respuesta = await httpclient.PostAsJsonAsync("api/Prioridades", prioridades);

        if(Validar())
        {
            if(!respuesta.IsSuccessStatusCode)
            {
                mensaje = respuesta.ReasonPhrase ?? "error";
                return;
            }

            var prioridadDevuelta = await respuesta.Content.ReadFromJsonAsync<Accesorio>();
        
            if(prioridadDevuelta is not null)
            {
                prioridades = prioridadDevuelta;
                StateHasChanged();
            }
        }
    }

    public void Nuevo()
    {
        this.prioridades = new Accesorio();
        mensaje = string.Empty;
    }

    public bool Validar()
    {
        return prioridades.Descripcion != null && prioridades.Costo > 0;
    }

    public async Task Eliminar()
    {
        using var respuesta = await httpclient.DeleteAsync($"api/Prioridades/{prioridades.AccesorioId}");

        if(Validar())
        {
            if(!respuesta.IsSuccessStatusCode)
            {
                mensaje = respuesta.ReasonPhrase ?? "error";
                return;
            }
            else
            {
                Nuevo();
            }
        }
    }
}