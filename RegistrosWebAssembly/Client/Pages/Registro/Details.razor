@page "/RegistroVehiculoDetalle"
@page "/RegistroVehiculoDetalle/{ModeloId:int}"
@inject HttpClient httpclient

<DataAnnotationsValidator />

<div class ="container">
    <div class="card shadow-lg">
        <div class="card-header">
            <h3>Registro de VehiculoDetalle.</h3>
        </div>
        <div class=card-body>

            <div class= "col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                <label>ID Modelo:</label>
                <div class="input-group mb-3">
                    <InputNumber @bind-Value ="Accesorio.AccesorioId" class="form-control" aria-describedby="BotonBuscar"/>
                    <button @onclick="Buscar" class="btn btn-outline-primary" type="button" id="BotonBuscar"><i class ="oi oi-magnifying-glass"/></button>
                </div>
            </div>

            <div class="mb-3">
                <label class="form-label" for="Fecha">Fecha:</label>
                <InputDate @bind-Value="Accesorio.Fecha" class="form-control" />
                <ValidationMessage For="@(() => global::Accesorio.Fecha)" />
            </div>

            <div class="mb-3">
                <label class="form-label" for="SolicitadoPor">Solicitado Por:</label>
                <InputText @bind-Value="Accesorio.SolicitadoPor" class="form-control"/>
                <ValidationMessage For="@(() => Accesorio.SolicitadoPor)" />
            </div>

            <div class="mb-3">
                <label class="form-label" for="Asunto">Asunto:</label>
                <InputText @bind-Value="Accesorio.Costo" class="form-control"/>
                <ValidationMessage For="@(() => Accesorio.Costo)" />
            </div>

            <div class="mb-3">
                <label class="form-label" for="Descripcion">Descripcion:</label>
                <InputText @bind-Value="Accesorio.Descripcion" class="form-control"/>
                <ValidationMessage For="@(() => Accesorio.Descripcion)" />
            </div>

        </div>
        <div class="card-footer d-flex justify-content-center">
            <div class="btn-group">
                <button type="button" class="btn btn-outline-primary" @onclick="Nuevo">Nuevo <i class="oi oi-file"/></button>
                <button type="submit" class="btn btn-outline-success">Guardar <i class="oi oi-document"/></button>
                <button type="button" class="btn btn-outline-danger"@onclick="Eliminar">Eliminar <i class="oi oi-trash"/></button>
            </div>
        </div>
    </div>
</div>
<label>@mensaje</label>

@code
{
    [Parameter]

    public int AccesorioId { get; set; }
    public VehiculoDetalle Accesorio { get; set; } = new VehiculoDetalle();
    public string mensaje = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if(AccesorioId > 0)
        {
            Accesorio.AccesorioId = AccesorioId;
            await Buscar();
        }
    }
    public async Task Buscar()
    {
        var ticketEncontrado = await httpclient.GetFromJsonAsync<VehiculoDetalle>($"api/Prioridades/{Accesorio.AccesorioId}");

        if(ticketEncontrado != null)
        {
            this.Accesorio = ticketEncontrado;
            StateHasChanged();
        }
        else
        {
            mensaje = "Ese accesorio no se ha encontrado";
        }
    }

    public async void Guardar()
    {
        using var respuesta = await httpclient.PostAsJsonAsync("api/Modelo", Accesorio);

        if(Validar())
        {
            if(!respuesta.IsSuccessStatusCode)
            {
                mensaje = respuesta.ReasonPhrase ?? "error";
                return;
            }

            var accesorioDevuelto = await respuesta.Content.ReadFromJsonAsync<VehiculoDetalle>();
        
            if(accesorioDevuelto is not null)
            {
                Accesorio = accesorioDevuelto;
                StateHasChanged();
            } 
        }
    }

    public void Nuevo()
    {
        this.Accesorio = new VehiculoDetalle();
        mensaje = string.Empty;
    }

    public bool Validar()
    {
        if(string.IsNullOrEmpty(Accesorio.SolicitadoPor))
        {
            return false;
        }
        if(string.IsNullOrEmpty(Accesorio.Costo))
        {
            return false;
        }
        if(string.IsNullOrEmpty(Accesorio.Descripcion))
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    public async Task Eliminar()
    {
        using var respuesta = await httpclient.DeleteAsync($"api/Modelo/{Accesorio.AccesorioId}");

        if(Validar())
        {
            if(!respuesta.IsSuccessStatusCode)
            {
                mensaje = respuesta.ReasonPhrase ?? "error";
                return;
            }
            else
            {
                Nuevo();
            }   
        }
    }
}